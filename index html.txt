<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Sunday School</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <!-- Manifest link for PWA functionality -->
    <link rel="manifest" href="manifest.json">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            -webkit-tap-highlight-color: transparent; /* Remove tap highlight for mobile */
        }
        .container {
            max-width: 600px;
        }
        .button-primary {
            @apply bg-blue-600 text-white font-medium py-3 px-6 rounded-xl shadow-lg transition-all duration-300 hover:bg-blue-700 active:scale-95;
        }
        .button-secondary {
            @apply bg-gray-200 text-gray-800 font-medium py-3 px-6 rounded-xl shadow-md transition-all duration-300 hover:bg-gray-300 active:scale-95;
        }
        .input-field {
            @apply w-full p-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200;
        }
        .card {
            @apply bg-white p-8 rounded-2xl shadow-xl border border-gray-100;
        }
        .message-box {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
        }
        #map {
            height: 400px;
            width: 100%;
        }
        .logo {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">


    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, onSnapshot, collection, query, where, getDocs, orderBy, limit } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        let db, auth;
        let userId = '';
        let appId = 'default-app-id';
        const firebaseConfig = {};


        if (typeof __app_id !== 'undefined') {
            appId = __app_id;
        }


        if (typeof __firebase_config !== 'undefined') {
            Object.assign(firebaseConfig, JSON.parse(__firebase_config));
            const app = initializeApp(firebaseConfig);
            auth = getAuth(app);
            db = getFirestore(app);
            console.log("Firebase initialized successfully.");


            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    console.log("User authenticated:", userId);
                    await checkUserRoleAndNavigate();
                } else {
                    console.log("No user signed in. Signing in anonymously...");
                    try {
                        if (typeof __initial_auth_token !== 'undefined') {
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Firebase Auth Error:", error);
                        showMessage("Authentication failed. Please try again.", "error");
                    }
                }
            });
        } else {
            showMessage("Firebase configuration not found. The app will not be fully functional.", "error");
            console.error("Firebase configuration not found. The app will not be fully functional.");
        }


        async function checkUserRoleAndNavigate() {
            try {
                const adminDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'admins', userId);
                const parentDocRef = doc(db, 'artifacts', appId, 'users', userId, 'parents', userId);
                const [adminDoc, parentDoc] = await Promise.all([getDoc(adminDocRef), getDoc(parentDocRef)]);


                if (adminDoc.exists()) {
                    window.renderView('admin-dashboard', { churchId: adminDoc.data().churchId });
                } else if (parentDoc.exists()) {
                    window.renderView('parent-dashboard');
                } else {
                    window.renderView('welcome');
                }
            } catch (error) {
                console.error("Error checking user role:", error);
                showMessage("Could not determine user role. Please try again.", "error");
            }
        }
        
        window.firebaseApp = {
            db,
            auth,
            userId: () => userId,
            appId: () => appId,
            checkUserRoleAndNavigate
        };


        const imageLogo = `
            <img src="https://i.ibb.co/L6V2x2q/1000014652.png" alt="Simple Sunday School Logo" class="h-auto w-48 mx-auto">
        `;
        
        window.renderView = (viewName, data = {}) => {
            const appDiv = document.getElementById('app');
            let htmlContent = '';
            
            const commonClasses = 'min-h-screen flex items-center justify-center p-4';


            if (viewName === 'welcome') {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card text-center space-y-6">
                            <div class="logo">
                                ${imageLogo}
                            </div>
                            <h1 class="text-3xl font-bold text-gray-900">Simple Sunday School</h1>
                            <p class="text-gray-500">A simple check-in solution for your church.</p>
                            <div class="space-y-4">
                                <button id="admin-login-btn" class="button-primary w-full">I am a Church Admin</button>
                                <button id="parent-login-btn" class="button-primary w-full">I am a Parent</button>
                            </div>
                        </div>
                    </div>
                `;
            } else if (viewName === 'admin-login') {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card space-y-6">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                            <h2 class="text-2xl font-semibold text-center">Admin Login</h2>
                            <p class="text-sm text-gray-500 text-center">Enter your login code to access your church dashboard.</p>
                            <form id="admin-login-form" class="space-y-4">
                                <input type="password" id="admin-code-input" placeholder="Login Code" class="input-field">
                                <button type="submit" class="button-primary w-full">Sign In</button>
                            </form>
                            <p class="text-center text-sm">Don't have a code? <a href="#" id="admin-signup-link" class="text-blue-600 hover:underline">Sign Up Here</a></p>
                            <button id="back-to-welcome-btn" class="button-secondary w-full">Back</button>
                        </div>
                    </div>
                `;
            } else if (viewName === 'admin-signup') {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card space-y-6">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                            <h2 class="text-2xl font-semibold text-center">Church Sign Up</h2>
                            <p class="text-sm text-gray-500 text-center">Fill out the application to get your unique login code.</p>
                            <form id="admin-signup-form" class="space-y-4">
                                <input type="text" id="church-name" placeholder="Church Name" class="input-field" required>
                                <input type="text" id="church-address" placeholder="Address" class="input-field" required>
                                <input type="text" id="church-denomination" placeholder="Denomination" class="input-field">
                                <input type="text" id="church-size" placeholder="Church Size (e.g., 50-100)" class="input-field">
                                <input type="text" id="church-event" placeholder="Church Event (e.g., Sunday School)" class="input-field">
                                <input type="text" id="admin-username" placeholder="Admin Username" class="input-field" required>
                                <button type="submit" class="button-primary w-full">Submit Application</button>
                            </form>
                            <button id="back-to-admin-login-btn" class="button-secondary w-full">Back</button>
                        </div>
                    </div>
                `;
            } else if (viewName === 'admin-dashboard') {
                const churchId = data.churchId;
                htmlContent = `
                    <div class="${commonClasses} !items-start py-8">
                        <div class="container space-y-8 w-full">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                            <div class="card space-y-4 text-center">
                                <h1 class="text-2xl font-bold">Admin Dashboard</h1>
                                <p class="text-sm text-gray-500">Your Church ID: <span class="font-mono bg-gray-200 px-2 py-1 rounded text-gray-700">${churchId}</span></p>
                                <div class="space-y-4">
                                    <button id="admin-scan-qr-btn" class="button-primary w-full">Scan Parent QR</button>
                                    <button id="admin-messages-btn" class="button-primary w-full">View Parent Messages</button>
                                    <button id="admin-logout-btn" class="button-secondary w-full">Sign Out</button>
                                </div>
                            </div>


                            <div id="admin-view-content" class="card space-y-6 w-full hidden"></div>
                        </div>
                    </div>
                `;
            } else if (viewName === 'parent-login') {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card space-y-6">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                            <h2 class="text-2xl font-semibold text-center">Parent Login</h2>
                            <form id="parent-login-form" class="space-y-4">
                                <input type="text" id="parent-username" placeholder="Username" class="input-field" required>
                                <input type="password" id="parent-password" placeholder="Password" class="input-field" required>
                                <button type="submit" class="button-primary w-full">Sign In</button>
                            </form>
                            <p class="text-center text-sm">First time user? <a href="#" id="parent-signup-link" class="text-blue-600 hover:underline">Sign Up Here</a></p>
                            <button id="back-to-welcome-btn" class="button-secondary w-full">Back</button>
                        </div>
                    </div>
                `;
            } else if (viewName === 'parent-signup') {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card space-y-6">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                            <h2 class="text-2xl font-semibold text-center">Parent Sign Up</h2>
                            <p class="text-sm text-gray-500 text-center">Create your family profile and get your check-in QR code.</p>
                            <form id="parent-signup-form" class="space-y-4">
                                <input type="text" id="parent-username" placeholder="Choose a Username" class="input-field" required>
                                <input type="password" id="parent-password" placeholder="Choose a Password" class="input-field" required>
                                <input type="text" id="child-name-1" placeholder="Child 1 Name" class="input-field" required>
                                <input type="text" id="child-age-1" placeholder="Child 1 Age" class="input-field">
                                <input type="text" id="child-allergies-1" placeholder="Child 1 Allergies (optional)" class="input-field">
                                <button type="submit" class="button-primary w-full">Create Profile</button>
                            </form>
                            <button id="back-to-parent-login-btn" class="button-secondary w-full">Back</button>
                        </div>
                    </div>
                `;
            } else if (viewName === 'parent-dashboard') {
                 htmlContent = `
                    <div class="${commonClasses} !items-start py-8">
                        <div class="container space-y-8 w-full">
                             <div class="logo">
                                ${imageLogo}
                            </div>
                             <div class="card space-y-4 text-center">
                                <h1 class="text-2xl font-bold">Parent Dashboard</h1>
                                <p class="text-sm text-gray-500">Scan this QR code at your church for check-in.</p>
                                <div id="qrcode" class="flex justify-center p-4"></div>
                                <button id="parent-messages-btn" class="button-primary w-full">Message Admin</button>
                                <button id="view-churches-map-btn" class="button-primary w-full">Find a Church</button>
                                <button id="parent-logout-btn" class="button-secondary w-full">Sign Out</button>
                             </div>
                             <div id="parent-view-content" class="card space-y-6 w-full hidden"></div>
                        </div>
                    </div>
                `;
            } else if (viewName === 'loading') {
                htmlContent = `
                    <div class="${commonClasses} flex-col">
                        <div class="logo">
                            ${imageLogo}
                        </div>
                        <svg class="animate-spin -ml-1 mr-3 h-10 w-10 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <p class="mt-4 text-gray-600">Loading...</p>
                    </div>
                `;
            } else {
                htmlContent = `
                    <div class="${commonClasses}">
                        <div class="container card text-center space-y-4">
                            <div class="logo">
                                ${imageLogo}
                            </div>
                            <h1 class="text-2xl font-bold">Error</h1>
                            <p class="text-gray-500">Something went wrong. Please refresh the page.</p>
                        </div>
                    </div>
                `;
            }


            appDiv.innerHTML = htmlContent;
            attachEventListeners(viewName);
        };


        function showMessage(message, type = 'info') {
            const messageBox = document.createElement('div');
            messageBox.className = `message-box p-4 rounded-xl shadow-lg text-white ${type === 'error' ? 'bg-red-500' : 'bg-green-500'} transition-all duration-300 transform scale-0`;
            messageBox.textContent = message;
            document.body.appendChild(messageBox);
            setTimeout(() => {
                messageBox.classList.add('scale-100');
            }, 10);
            setTimeout(() => {
                messageBox.classList.remove('scale-100');
                setTimeout(() => messageBox.remove(), 300);
            }, 3000);
        }


        function attachEventListeners(viewName) {
            const { db, auth, userId, appId } = window.firebaseApp;


            if (viewName === 'welcome') {
                document.getElementById('admin-login-btn').addEventListener('click', () => window.renderView('admin-login'));
                document.getElementById('parent-login-btn').addEventListener('click', () => window.renderView('parent-login'));
            } else if (viewName === 'admin-login') {
                document.getElementById('back-to-welcome-btn').addEventListener('click', () => window.renderView('welcome'));
                document.getElementById('admin-signup-link').addEventListener('click', (e) => {
                    e.preventDefault();
                    window.renderView('admin-signup');
                });
                document.getElementById('admin-login-form').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    window.renderView('loading');
                    const loginCode = document.getElementById('admin-code-input').value;
                    if (!loginCode) {
                        showMessage("Please enter a login code.", "error");
                        window.renderView('admin-login');
                        return;
                    }


                    try {
                        const q = query(collection(db, 'artifacts', appId, 'public', 'data', 'churches'), where('loginCode', '==', loginCode));
                        const querySnapshot = await getDocs(q);
                        if (!querySnapshot.empty) {
                            const churchDoc = querySnapshot.docs[0];
                            const churchData = churchDoc.data();
                            await setDoc(doc(db, 'artifacts', appId, 'public', 'data', 'admins', userId()), {
                                churchId: churchDoc.id,
                                username: churchData.adminUsername
                            });
                            showMessage("Signed in as Admin!", "info");
                            window.renderView('admin-dashboard', { churchId: churchDoc.id });
                        } else {
                            showMessage("Invalid login code.", "error");
                            window.renderView('admin-login');
                        }
                    } catch (error) {
                        console.error("Admin login error:", error);
                        showMessage("Login failed. Please try again.", "error");
                        window.renderView('admin-login');
                    }
                });
            } else if (viewName === 'admin-signup') {
                 document.getElementById('back-to-admin-login-btn').addEventListener('click', () => window.renderView('admin-login'));
                 document.getElementById('admin-signup-form').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    window.renderView('loading');
                    const churchData = {
                        churchName: document.getElementById('church-name').value,
                        address: document.getElementById('church-address').value,
                        denomination: document.getElementById('church-denomination').value,
                        churchSize: document.getElementById('church-size').value,
                        churchEvent: document.getElementById('church-event').value,
                        adminUsername: document.getElementById('admin-username').value,
                        loginCode: Math.random().toString(36).substring(2, 8).toUpperCase(),
                    };


                    try {
                        const newChurchRef = await addDoc(collection(db, 'artifacts', appId, 'public', 'data', 'churches'), churchData);
                        await setDoc(doc(db, 'artifacts', appId, 'public', 'data', 'admins', userId()), {
                            churchId: newChurchRef.id,
                            username: churchData.adminUsername,
                        });
                        showMessage(`Application successful! Your login code is: ${churchData.loginCode}`, "info");
                        window.renderView('admin-login');
                    } catch (error) {
                        console.error("Church signup error:", error);
                        showMessage("Signup failed. Please try again.", "error");
                        window.renderView('admin-signup');
                    }
                 });
            } else if (viewName === 'admin-dashboard') {
                const churchId = document.querySelector('.font-mono').textContent;
                const adminViewContent = document.getElementById('admin-view-content');


                document.getElementById('admin-scan-qr-btn').addEventListener('click', async () => {
                    adminViewContent.classList.remove('hidden');
                    adminViewContent.innerHTML = `<h3 class="text-xl font-semibold text-center">Scan QR Code</h3><p class="text-gray-500 text-center">Use your device's camera to scan a parent's QR code.</p><div id="qr-scan-placeholder" class="bg-gray-200 h-64 flex items-center justify-center rounded-xl text-gray-500">QR Scanner Placeholder</div>`;
                    showMessage("QR scanning functionality would be implemented here, likely using a camera API. For this demo, it's a placeholder.", "info");
                });


                document.getElementById('admin-messages-btn').addEventListener('click', async () => {
                    adminViewContent.classList.remove('hidden');
                    adminViewContent.innerHTML = `<h3 class="text-xl font-semibold text-center">Messages</h3><p class="text-gray-500 text-center">Loading messages...</p><div id="messages-list" class="space-y-4"></div>`;
                    
                    const q = query(collection(db, 'artifacts', appId, 'public', 'data', 'messages'), where('receiverId', '==', churchId));
                    onSnapshot(q, (querySnapshot) => {
                        const messagesList = document.getElementById('messages-list');
                        if (!messagesList) return;
                        messagesList.innerHTML = '';
                        if (querySnapshot.empty) {
                            messagesList.innerHTML = `<p class="text-gray-500 text-center">No messages yet.</p>`;
                        }
                        querySnapshot.forEach((doc) => {
                            const message = doc.data();
                            const messageDiv = document.createElement('div');
                            messageDiv.className = 'bg-gray-50 p-4 rounded-xl shadow-sm border border-gray-100';
                            messageDiv.innerHTML = `<p class="font-semibold text-gray-900">${message.senderName}:</p><p>${message.text}</p>`;
                            messagesList.appendChild(messageDiv);
                        });
                    });
                });


                document.getElementById('admin-logout-btn').addEventListener('click', async () => {
                    await auth.signOut();
                    showMessage("Signed out successfully!", "info");
                    window.renderView('welcome');
                });
            } else if (viewName === 'parent-login') {
                document.getElementById('back-to-welcome-btn').addEventListener('click', () => window.renderView('welcome'));
                document.getElementById('parent-signup-link').addEventListener('click', (e) => {
                    e.preventDefault();
                    window.renderView('parent-signup');
                });
                document.getElementById('parent-login-form').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    window.renderView('loading');
                    const username = document.getElementById('parent-username').value;
                    const password = document.getElementById('parent-password').value;
                    try {
                        const q = query(collection(db, 'artifacts', appId, 'users', userId(), 'parents'), where('username', '==', username), where('password', '==', password));
                        const querySnapshot = await getDocs(q);
                        if (!querySnapshot.empty) {
                            showMessage("Signed in as Parent!", "info");
                            window.renderView('parent-dashboard');
                        } else {
                            showMessage("Invalid username or password.", "error");
                            window.renderView('parent-login');
                        }
                    } catch (error) {
                        console.error("Parent login error:", error);
                        showMessage("Login failed. Please try again.", "error");
                        window.renderView('parent-login');
                    }
                });
            } else if (viewName === 'parent-signup') {
                document.getElementById('back-to-parent-login-btn').addEventListener('click', () => window.renderView('parent-login'));
                document.getElementById('parent-signup-form').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    window.renderView('loading');
                    const parentData = {
                        username: document.getElementById('parent-username').value,
                        password: document.getElementById('parent-password').value,
                        children: [{
                            name: document.getElementById('child-name-1').value,
                            age: document.getElementById('child-age-1').value,
                            allergies: document.getElementById('child-allergies-1').value,
                        }]
                    };


                    try {
                         await setDoc(doc(db, 'artifacts', appId, 'users', userId(), 'parents', userId()), parentData);
                         showMessage("Profile created! You can now log in.", "info");
                         window.renderView('parent-dashboard');
                    } catch (error) {
                         console.error("Parent signup error:", error);
                         showMessage("Signup failed. Please try again.", "error");
                         window.renderView('parent-signup');
                    }
                });
            } else if (viewName === 'parent-dashboard') {
                const parentViewContent = document.getElementById('parent-view-content');


                new QRCode(document.getElementById("qrcode"), {
                    text: userId(),
                    width: 200,
                    height: 200,
                });


                document.getElementById('parent-messages-btn').addEventListener('click', async () => {
                    parentViewContent.classList.remove('hidden');
                    parentViewContent.innerHTML = `
                        <h3 class="text-xl font-semibold text-center">Message Admin</h3>
                        <p class="text-sm text-gray-500 text-center">Select a church to send a message.</p>
                        <div id="church-list" class="space-y-4"></div>
                        <div id="messaging-section" class="space-y-4 hidden">
                            <h4 class="font-bold" id="messaging-church-name"></h4>
                            <div id="chat-window" class="border border-gray-200 p-4 rounded-xl h-48 overflow-y-auto"></div>
                            <form id="message-form" class="flex space-x-2">
                                <input type="text" id="message-input" placeholder="Type a message..." class="input-field flex-grow">
                                <button type="submit" class="button-primary px-4 py-2">Send</button>
                            </form>
                        </div>
                    `;


                    const q = query(collection(db, 'artifacts', appId, 'public', 'data', 'churches'));
                    const querySnapshot = await getDocs(q);
                    const churchList = document.getElementById('church-list');
                    if (querySnapshot.empty) {
                        churchList.innerHTML = `<p class="text-gray-500 text-center">No churches found.</p>`;
                        return;
                    }
                    
                    querySnapshot.forEach((doc) => {
                        const church = doc.data();
                        const churchDiv = document.createElement('div');
                        churchDiv.className = 'bg-gray-50 p-4 rounded-xl shadow-sm border border-gray-100 cursor-pointer hover:bg-gray-100 transition-colors';
                        churchDiv.innerHTML = `<p class="font-semibold text-blue-600">${church.churchName}</p><p class="text-sm text-gray-500">${church.address}</p>`;
                        churchDiv.addEventListener('click', () => {
                            setupMessaging(doc.id, church.churchName);
                        });
                        churchList.appendChild(churchDiv);
                    });
                });


                document.getElementById('view-churches-map-btn').addEventListener('click', async () => {
                    parentViewContent.classList.remove('hidden');
                    parentViewContent.innerHTML = `<h3 class="text-xl font-semibold text-center">Find a Church</h3><div id="map" class="rounded-xl shadow-md"></div>`;


                    const churches = [];
                    const q = query(collection(db, 'artifacts', appId, 'public', 'data', 'churches'));
                    const querySnapshot = await getDocs(q);
                    querySnapshot.forEach(doc => churches.push({ id: doc.id, ...doc.data() }));


                    const script = document.createElement('script');
                    script.src = `https://maps.googleapis.com/maps/api/js?key=&callback=initMap`;
                    script.async = true;
                    script.defer = true;
                    document.head.appendChild(script);


                    window.initMap = () => {
                        const map = new google.maps.Map(document.getElementById('map'), {
                            center: { lat: 39.8283, lng: -98.5795 }, // Center of the US
                            zoom: 4,
                        });
                        
                        churches.forEach(church => {
                            const geocoder = new google.maps.Geocoder();
                            geocoder.geocode({ 'address': church.address }, (results, status) => {
                                if (status === 'OK' && results[0]) {
                                    const marker = new google.maps.Marker({
                                        map: map,
                                        position: results[0].geometry.location,
                                        title: church.churchName
                                    });
                                    const infoWindow = new google.maps.InfoWindow({
                                        content: `<div><strong>${church.churchName}</strong><br>${church.address}</div>`
                                    });
                                    marker.addListener('click', () => {
                                        infoWindow.open(map, marker);
                                    });
                                } else {
                                    console.log('Geocode was not successful for the following reason: ' + status);
                                }
                            });
                        });
                    };
                });
                
                document.getElementById('parent-logout-btn').addEventListener('click', async () => {
                    await auth.signOut();
                    showMessage("Signed out successfully!", "info");
                    window.renderView('welcome');
                });


                function setupMessaging(churchId, churchName) {
                    document.getElementById('church-list').classList.add('hidden');
                    const messagingSection = document.getElementById('messaging-section');
                    messagingSection.classList.remove('hidden');
                    document.getElementById('messaging-church-name').textContent = `Messaging: ${churchName}`;
                    const chatWindow = document.getElementById('chat-window');


                    const q = query(collection(db, 'artifacts', appId, 'public', 'data', 'messages'), where('senderId', '==', userId()), where('receiverId', '==', churchId));
                    onSnapshot(q, (querySnapshot) => {
                        chatWindow.innerHTML = '';
                        if (querySnapshot.empty) {
                            chatWindow.innerHTML = `<p class="text-gray-500 text-center text-sm">Start a conversation.</p>`;
                        }
                        querySnapshot.forEach((doc) => {
                            const message = doc.data();
                            const messageDiv = document.createElement('div');
                            messageDiv.className = `p-2 my-2 rounded-xl text-sm ${message.senderId === userId() ? 'bg-blue-100 ml-auto' : 'bg-gray-200 mr-auto'}`;
                            messageDiv.style.maxWidth = '80%';
                            messageDiv.textContent = message.text;
                            chatWindow.appendChild(messageDiv);
                        });
                        chatWindow.scrollTop = chatWindow.scrollHeight;
                    });
                    
                    document.getElementById('message-form').addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const messageInput = document.getElementById('message-input');
                        const text = messageInput.value.trim();
                        if (text) {
                            await addDoc(collection(db, 'artifacts', appId, 'public', 'data', 'messages'), {
                                text: text,
                                senderId: userId(),
                                receiverId: churchId,
                                senderName: 'Parent',
                                timestamp: Date.now()
                            });
                            messageInput.value = '';
                        }
                    });
                }
            }
        }


        window.onload = () => {
            window.renderView('loading');
        };
    </script>
    <div id="app"></div>


</body>
</html>